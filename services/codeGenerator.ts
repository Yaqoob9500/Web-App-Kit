import { AppConfig } from '../types';

export interface GeneratedProjectFiles {
    readme: string;
    mainActivity: string;
    buildGradle: string;
    gradleProperties: string;
    androidManifest: string;
    activityMainLayout: string;
    stringsXml: string;
}

export const generateProjectFiles = (config: AppConfig): GeneratedProjectFiles => {
    return {
        readme: generateReadme(config),
        mainActivity: generateMainActivity(config),
        buildGradle: generateBuildGradle(config),
        gradleProperties: generateGradleProperties(config),
        androidManifest: generateAndroidManifest(config),
        activityMainLayout: generateActivityMainLayout(config),
        stringsXml: generateStringsXml(config),
    };
};

const generateReadme = (config: AppConfig): string => `
# ${config.appName} - Android Project

This project was generated by the Web to APK Generator. It contains a complete, ready-to-build Android project.

## Prerequisites

1.  **Java Development Kit (JDK) 17+**: Make sure \`JAVA_HOME\` is set.
2.  **Android SDK**: Ensure \`ANDROID_HOME\` is set and you have the necessary build tools and platform tools. You can install this via Android Studio.

## How to Build Your APK

Building is simple! No need to open Android Studio. Just run one command from your terminal in this project's root directory.

### On macOS / Linux:
\`\`\`bash
chmod +x ./gradlew
./gradlew assembleRelease
\`\`\`

### On Windows:
\`\`\`bash
.\\gradlew.bat assembleRelease
\`\`\`

## After Building

The signed, release-ready APK will be located at:
\`\`\`
app/build/outputs/apk/release/app-release.apk
\`\`\`

You can now install this file on any Android device.
`;

const generateMainActivity = (config: AppConfig): string => `
package ${config.packageId}

import android.annotation.SuppressLint
import android.content.Intent
import android.graphics.Bitmap
import android.net.Uri
import android.os.Bundle
import android.view.View
import android.webkit.WebChromeClient
import android.webkit.WebSettings
import android.webkit.WebView
import android.webkit.WebViewClient
import androidx.appcompat.app.AppCompatActivity
import androidx.swiperefreshlayout.widget.SwipeRefreshLayout

class MainActivity : AppCompatActivity() {

    private lateinit var webView: WebView
    ${config.options.pullToRefresh ? 'private lateinit var swipeRefreshLayout: SwipeRefreshLayout' : ''}

    @SuppressLint("SetJavaScriptEnabled")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        ${config.options.fullScreen ? `window.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_FULLSCREEN
        actionBar?.hide()` : ''}
        setContentView(R.layout.activity_main)

        webView = findViewById(R.id.webview)
        ${config.options.pullToRefresh ? `
        swipeRefreshLayout = findViewById(R.id.swipe_refresh_layout)
        swipeRefreshLayout.setOnRefreshListener {
            webView.reload()
        }
        ` : ''}

        setupWebView()
        webView.loadUrl("${config.url}")
    }

    private fun setupWebView() {
        webView.settings.apply {
            javaScriptEnabled = ${config.options.allowJavaScript}
            domStorageEnabled = true
            ${config.options.offlineCache ? `
            cacheMode = WebSettings.LOAD_DEFAULT
            setAppCacheEnabled(true)
            ` : 'cacheMode = WebSettings.LOAD_NO_CACHE'}
        }

        webView.webViewClient = object : WebViewClient() {
            override fun shouldOverrideUrlLoading(view: WebView?, url: String): Boolean {
                val uri = Uri.parse(url)
                val host = Uri.parse("${config.url}").host
                
                return if ("${config.options.externalLinksInBrowser}" == "true" && (uri.scheme != "http" && uri.scheme != "https" || !uri.host.equals(host))) {
                    try {
                        val intent = Intent(Intent.ACTION_VIEW, uri)
                        startActivity(intent)
                        true
                    } catch (e: Exception) {
                        // Could not handle the intent
                        true
                    }
                } else {
                    false
                }
            }
            
            override fun onPageStarted(view: WebView?, url: String?, favicon: Bitmap?) {
                super.onPageStarted(view, url, favicon)
                ${config.options.pullToRefresh ? 'swipeRefreshLayout.isRefreshing = true' : ''}
            }

            override fun onPageFinished(view: WebView?, url: String?) {
                super.onPageFinished(view, url)
                ${config.options.pullToRefresh ? 'swipeRefreshLayout.isRefreshing = false' : ''}
            }
        }
        
        ${config.options.allowFileUploads ? `
        webView.webChromeClient = object : WebChromeClient() {
            // TODO: Implement onShowFileChooser for file uploads
        }
        ` : 'webView.webChromeClient = WebChromeClient()'}
    }

    @Deprecated("Deprecated in Java")
    override fun onBackPressed() {
        if (webView.canGoBack()) {
            webView.goBack()
        } else {
            super.onBackPressed()
        }
    }
}
`;

const generateBuildGradle = (config: AppConfig): string => `
plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
}

android {
    namespace = "${config.packageId}"
    compileSdk = 34

    defaultConfig {
        applicationId = "${config.packageId}"
        minSdk = ${config.advanced.minSdk}
        targetSdk = 34
        versionCode = ${config.advanced.versionCode}
        versionName = "${config.advanced.versionName}"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        create("release") {
            storeFile = file(System.getenv("MYAPP_RELEASE_STORE_FILE") ?: "${config.advanced.keystorePath}")
            storePassword = System.getenv("MYAPP_RELEASE_STORE_PASSWORD") ?: "${config.advanced.keystorePassword}"
            keyAlias = System.getenv("MYAPP_RELEASE_KEY_ALIAS") ?: "${config.advanced.keystoreAlias}"
            keyPassword = System.getenv("MYAPP_RELEASE_KEY_PASSWORD") ?: "${config.advanced.keyPassword}"
        }
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
            signingConfig = signingConfigs.getByName("release")
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        viewBinding = true
    }
}

dependencies {
    implementation("androidx.core:core-ktx:1.12.0")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("com.google.android.material:material:1.11.0")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    ${config.options.pullToRefresh ? 'implementation("androidx.swiperefreshlayout:swiperefreshlayout:1.1.0")' : ''}
    testImplementation("junit:junit:4.13.2")
    androidTestImplementation("androidx.test.ext:junit:1.1.5")
    androidTestImplementation("androidx.test.espresso:espresso-core:3.5.1")
}
`;

const generateGradleProperties = (config: AppConfig): string => `
# For local development, you can uncomment and fill these.
# For CI/CD, use environment variables.
# MYAPP_RELEASE_STORE_FILE=${config.advanced.keystorePath}
# MYAPP_RELEASE_KEY_ALIAS=${config.advanced.keystoreAlias}
# MYAPP_RELEASE_STORE_PASSWORD=${config.advanced.keystorePassword}
# MYAPP_RELEASE_KEY_PASSWORD=${config.advanced.keyPassword}
`;

const generateAndroidManifest = (config: AppConfig): string => `
<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools">
    
    <uses-permission android:name="android.permission.INTERNET" />

    <application
        android:allowBackup="true"
        android:dataExtractionRules="@xml/data_extraction_rules"
        android:fullBackupContent="@xml/backup_rules"
        android:icon="@mipmap/ic_launcher"
        android:label="@string/app_name"
        android:roundIcon="@mipmap/ic_launcher_round"
        android:supportsRtl="true"
        android:theme="@style/Theme.AppCompat.Light.NoActionBar"
        ${config.url.startsWith('http://') ? 'android:usesCleartextTraffic="true"' : ''}
        tools:targetApi="31">
        <activity
            android:name=".MainActivity"
            android:exported="true"
            ${config.options.fullScreen ? 'android:theme="@style/Theme.AppCompat.Light.NoActionBar.FullScreen"' : ''}
            >
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />
                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
    </application>

</manifest>
`;

const generateActivityMainLayout = (config: AppConfig): string => `
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".MainActivity">

    ${config.options.pullToRefresh ? `
    <androidx.swiperefreshlayout.widget.SwipeRefreshLayout
        android:id="@+id/swipe_refresh_layout"
        android:layout_width="match_parent"
        android:layout_height="match_parent">
    ` : ''}

        <WebView
            android:id="@+id/webview"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent" />

    ${config.options.pullToRefresh ? `
    </androidx.swiperefreshlayout.widget.SwipeRefreshLayout>
    ` : ''}

</androidx.constraintlayout.widget.ConstraintLayout>
`;

const generateStringsXml = (config: AppConfig): string => `
<resources>
    <string name="app_name">${config.appName}</string>
</resources>
`;